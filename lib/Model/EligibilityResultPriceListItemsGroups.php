<?php
/**
 * EligibilityResultPriceListItemsGroups
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Prizz-Telecom Extranet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Infracorp\Extranet\Client\Model;

use \ArrayAccess;
use \Infracorp\Extranet\Client\ObjectSerializer;

/**
 * EligibilityResultPriceListItemsGroups Class Doc Comment
 *
 * @category Class
 * @description Price list items grouped by product group
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EligibilityResultPriceListItemsGroups implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EligibilityResult_priceListItemsGroups';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'main' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'bandwidth' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'commitment' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'grt' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'nrc' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'distance' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'fiber_count' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'extremity_site_a' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'extremity_site_b' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'maintenance' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'subnet' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]',
        'national' => '\Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'main' => null,
        'bandwidth' => null,
        'commitment' => null,
        'grt' => null,
        'nrc' => null,
        'distance' => null,
        'fiber_count' => null,
        'extremity_site_a' => null,
        'extremity_site_b' => null,
        'maintenance' => null,
        'subnet' => null,
        'national' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'main' => false,
        'bandwidth' => false,
        'commitment' => false,
        'grt' => false,
        'nrc' => false,
        'distance' => false,
        'fiber_count' => false,
        'extremity_site_a' => false,
        'extremity_site_b' => false,
        'maintenance' => false,
        'subnet' => false,
        'national' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'main' => 'main',
        'bandwidth' => 'bandwidth',
        'commitment' => 'commitment',
        'grt' => 'grt',
        'nrc' => 'nrc',
        'distance' => 'distance',
        'fiber_count' => 'fiber_count',
        'extremity_site_a' => 'extremity_site_a',
        'extremity_site_b' => 'extremity_site_b',
        'maintenance' => 'maintenance',
        'subnet' => 'subnet',
        'national' => 'national'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'main' => 'setMain',
        'bandwidth' => 'setBandwidth',
        'commitment' => 'setCommitment',
        'grt' => 'setGrt',
        'nrc' => 'setNrc',
        'distance' => 'setDistance',
        'fiber_count' => 'setFiberCount',
        'extremity_site_a' => 'setExtremitySiteA',
        'extremity_site_b' => 'setExtremitySiteB',
        'maintenance' => 'setMaintenance',
        'subnet' => 'setSubnet',
        'national' => 'setNational'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'main' => 'getMain',
        'bandwidth' => 'getBandwidth',
        'commitment' => 'getCommitment',
        'grt' => 'getGrt',
        'nrc' => 'getNrc',
        'distance' => 'getDistance',
        'fiber_count' => 'getFiberCount',
        'extremity_site_a' => 'getExtremitySiteA',
        'extremity_site_b' => 'getExtremitySiteB',
        'maintenance' => 'getMaintenance',
        'subnet' => 'getSubnet',
        'national' => 'getNational'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('main', $data ?? [], null);
        $this->setIfExists('bandwidth', $data ?? [], null);
        $this->setIfExists('commitment', $data ?? [], null);
        $this->setIfExists('grt', $data ?? [], null);
        $this->setIfExists('nrc', $data ?? [], null);
        $this->setIfExists('distance', $data ?? [], null);
        $this->setIfExists('fiber_count', $data ?? [], null);
        $this->setIfExists('extremity_site_a', $data ?? [], null);
        $this->setIfExists('extremity_site_b', $data ?? [], null);
        $this->setIfExists('maintenance', $data ?? [], null);
        $this->setIfExists('subnet', $data ?? [], null);
        $this->setIfExists('national', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets main
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $main Main product group, contains on item with base price
     *
     * @return self
     */
    public function setMain($main)
    {
        if (is_null($main)) {
            throw new \InvalidArgumentException('non-nullable main cannot be null');
        }
        $this->container['main'] = $main;

        return $this;
    }

    /**
     * Gets bandwidth
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getBandwidth()
    {
        return $this->container['bandwidth'];
    }

    /**
     * Sets bandwidth
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $bandwidth Bandwidth product group, list available bandwidths
     *
     * @return self
     */
    public function setBandwidth($bandwidth)
    {
        if (is_null($bandwidth)) {
            throw new \InvalidArgumentException('non-nullable bandwidth cannot be null');
        }
        $this->container['bandwidth'] = $bandwidth;

        return $this;
    }

    /**
     * Gets commitment
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getCommitment()
    {
        return $this->container['commitment'];
    }

    /**
     * Sets commitment
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $commitment Commitment product group, list available commitments
     *
     * @return self
     */
    public function setCommitment($commitment)
    {
        if (is_null($commitment)) {
            throw new \InvalidArgumentException('non-nullable commitment cannot be null');
        }
        $this->container['commitment'] = $commitment;

        return $this;
    }

    /**
     * Gets grt
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getGrt()
    {
        return $this->container['grt'];
    }

    /**
     * Sets grt
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $grt GRT product group, list available GRT options
     *
     * @return self
     */
    public function setGrt($grt)
    {
        if (is_null($grt)) {
            throw new \InvalidArgumentException('non-nullable grt cannot be null');
        }
        $this->container['grt'] = $grt;

        return $this;
    }

    /**
     * Gets nrc
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getNrc()
    {
        return $this->container['nrc'];
    }

    /**
     * Sets nrc
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $nrc NRC product group, contain one item in most cases
     *
     * @return self
     */
    public function setNrc($nrc)
    {
        if (is_null($nrc)) {
            throw new \InvalidArgumentException('non-nullable nrc cannot be null');
        }
        $this->container['nrc'] = $nrc;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $distance Used in FON offers
     *
     * @return self
     */
    public function setDistance($distance)
    {
        if (is_null($distance)) {
            throw new \InvalidArgumentException('non-nullable distance cannot be null');
        }
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets fiber_count
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getFiberCount()
    {
        return $this->container['fiber_count'];
    }

    /**
     * Sets fiber_count
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $fiber_count Used in FON offers
     *
     * @return self
     */
    public function setFiberCount($fiber_count)
    {
        if (is_null($fiber_count)) {
            throw new \InvalidArgumentException('non-nullable fiber_count cannot be null');
        }
        $this->container['fiber_count'] = $fiber_count;

        return $this;
    }

    /**
     * Gets extremity_site_a
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getExtremitySiteA()
    {
        return $this->container['extremity_site_a'];
    }

    /**
     * Sets extremity_site_a
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $extremity_site_a Used in FON offers, describes the extremity A
     *
     * @return self
     */
    public function setExtremitySiteA($extremity_site_a)
    {
        if (is_null($extremity_site_a)) {
            throw new \InvalidArgumentException('non-nullable extremity_site_a cannot be null');
        }
        $this->container['extremity_site_a'] = $extremity_site_a;

        return $this;
    }

    /**
     * Gets extremity_site_b
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getExtremitySiteB()
    {
        return $this->container['extremity_site_b'];
    }

    /**
     * Sets extremity_site_b
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $extremity_site_b Used in FON offers, describes the extremity B
     *
     * @return self
     */
    public function setExtremitySiteB($extremity_site_b)
    {
        if (is_null($extremity_site_b)) {
            throw new \InvalidArgumentException('non-nullable extremity_site_b cannot be null');
        }
        $this->container['extremity_site_b'] = $extremity_site_b;

        return $this;
    }

    /**
     * Gets maintenance
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getMaintenance()
    {
        return $this->container['maintenance'];
    }

    /**
     * Sets maintenance
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $maintenance Used in FON offers
     *
     * @return self
     */
    public function setMaintenance($maintenance)
    {
        if (is_null($maintenance)) {
            throw new \InvalidArgumentException('non-nullable maintenance cannot be null');
        }
        $this->container['maintenance'] = $maintenance;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $subnet Used in L3 offers, list available subnets sizes
     *
     * @return self
     */
    public function setSubnet($subnet)
    {
        if (is_null($subnet)) {
            throw new \InvalidArgumentException('non-nullable subnet cannot be null');
        }
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets national
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null
     */
    public function getNational()
    {
        return $this->container['national'];
    }

    /**
     * Sets national
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityPriceListItem[]|null $national Used in L2 offers, list available national options
     *
     * @return self
     */
    public function setNational($national)
    {
        if (is_null($national)) {
            throw new \InvalidArgumentException('non-nullable national cannot be null');
        }
        $this->container['national'] = $national;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


