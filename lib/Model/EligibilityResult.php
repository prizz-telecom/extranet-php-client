<?php
/**
 * EligibilityResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Prizz-Telecom Extranet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Infracorp\Extranet\Client\Model;

use \ArrayAccess;
use \Infracorp\Extranet\Client\ObjectSerializer;

/**
 * EligibilityResult Class Doc Comment
 *
 * @category Class
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EligibilityResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EligibilityResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'tech' => 'int',
        'delivery' => 'int',
        'grt_min' => 'int',
        'grt_max' => 'int',
        'grt_non_working_hours_option_available' => 'bool',
        'grt_non_working_hours_option_mandatory' => 'bool',
        'nrc_min' => 'int',
        'nrc_max' => 'int',
        'commitment_min' => 'int',
        'commitment_max' => 'int',
        'upload_min' => 'int',
        'upload_max' => 'int',
        'download_min' => 'int',
        'download_max' => 'int',
        'guaranteed_upload_min' => 'int',
        'guaranteed_upload_max' => 'int',
        'guaranteedd_download_min' => 'int',
        'guaranteedd_download_max' => 'int',
        'rc_min' => 'int',
        'rc_max' => 'int',
        'price_list_items_groups' => '\Infracorp\Extranet\Client\Model\EligibilityResultPriceListItemsGroups',
        'offer_id' => 'int',
        'price_list_id' => 'int',
        'combinations' => '\Infracorp\Extranet\Client\Model\EligibilityResultCombination[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'tech' => null,
        'delivery' => null,
        'grt_min' => null,
        'grt_max' => null,
        'grt_non_working_hours_option_available' => null,
        'grt_non_working_hours_option_mandatory' => null,
        'nrc_min' => null,
        'nrc_max' => null,
        'commitment_min' => null,
        'commitment_max' => null,
        'upload_min' => null,
        'upload_max' => null,
        'download_min' => null,
        'download_max' => null,
        'guaranteed_upload_min' => null,
        'guaranteed_upload_max' => null,
        'guaranteedd_download_min' => null,
        'guaranteedd_download_max' => null,
        'rc_min' => null,
        'rc_max' => null,
        'price_list_items_groups' => null,
        'offer_id' => null,
        'price_list_id' => null,
        'combinations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'tech' => false,
        'delivery' => true,
        'grt_min' => true,
        'grt_max' => true,
        'grt_non_working_hours_option_available' => false,
        'grt_non_working_hours_option_mandatory' => false,
        'nrc_min' => true,
        'nrc_max' => true,
        'commitment_min' => true,
        'commitment_max' => true,
        'upload_min' => true,
        'upload_max' => true,
        'download_min' => true,
        'download_max' => true,
        'guaranteed_upload_min' => true,
        'guaranteed_upload_max' => true,
        'guaranteedd_download_min' => true,
        'guaranteedd_download_max' => true,
        'rc_min' => true,
        'rc_max' => true,
        'price_list_items_groups' => false,
        'offer_id' => true,
        'price_list_id' => true,
        'combinations' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'tech' => 'tech',
        'delivery' => 'delivery',
        'grt_min' => 'grtMin',
        'grt_max' => 'grtMax',
        'grt_non_working_hours_option_available' => 'grtNonWorkingHoursOptionAvailable',
        'grt_non_working_hours_option_mandatory' => 'grtNonWorkingHoursOptionMandatory',
        'nrc_min' => 'nrcMin',
        'nrc_max' => 'nrcMax',
        'commitment_min' => 'commitmentMin',
        'commitment_max' => 'commitmentMax',
        'upload_min' => 'uploadMin',
        'upload_max' => 'uploadMax',
        'download_min' => 'downloadMin',
        'download_max' => 'downloadMax',
        'guaranteed_upload_min' => 'guaranteedUploadMin',
        'guaranteed_upload_max' => 'guaranteedUploadMax',
        'guaranteedd_download_min' => 'guaranteeddDownloadMin',
        'guaranteedd_download_max' => 'guaranteeddDownloadMax',
        'rc_min' => 'rcMin',
        'rc_max' => 'rcMax',
        'price_list_items_groups' => 'priceListItemsGroups',
        'offer_id' => 'offerId',
        'price_list_id' => 'priceListId',
        'combinations' => 'combinations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'tech' => 'setTech',
        'delivery' => 'setDelivery',
        'grt_min' => 'setGrtMin',
        'grt_max' => 'setGrtMax',
        'grt_non_working_hours_option_available' => 'setGrtNonWorkingHoursOptionAvailable',
        'grt_non_working_hours_option_mandatory' => 'setGrtNonWorkingHoursOptionMandatory',
        'nrc_min' => 'setNrcMin',
        'nrc_max' => 'setNrcMax',
        'commitment_min' => 'setCommitmentMin',
        'commitment_max' => 'setCommitmentMax',
        'upload_min' => 'setUploadMin',
        'upload_max' => 'setUploadMax',
        'download_min' => 'setDownloadMin',
        'download_max' => 'setDownloadMax',
        'guaranteed_upload_min' => 'setGuaranteedUploadMin',
        'guaranteed_upload_max' => 'setGuaranteedUploadMax',
        'guaranteedd_download_min' => 'setGuaranteeddDownloadMin',
        'guaranteedd_download_max' => 'setGuaranteeddDownloadMax',
        'rc_min' => 'setRcMin',
        'rc_max' => 'setRcMax',
        'price_list_items_groups' => 'setPriceListItemsGroups',
        'offer_id' => 'setOfferId',
        'price_list_id' => 'setPriceListId',
        'combinations' => 'setCombinations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'tech' => 'getTech',
        'delivery' => 'getDelivery',
        'grt_min' => 'getGrtMin',
        'grt_max' => 'getGrtMax',
        'grt_non_working_hours_option_available' => 'getGrtNonWorkingHoursOptionAvailable',
        'grt_non_working_hours_option_mandatory' => 'getGrtNonWorkingHoursOptionMandatory',
        'nrc_min' => 'getNrcMin',
        'nrc_max' => 'getNrcMax',
        'commitment_min' => 'getCommitmentMin',
        'commitment_max' => 'getCommitmentMax',
        'upload_min' => 'getUploadMin',
        'upload_max' => 'getUploadMax',
        'download_min' => 'getDownloadMin',
        'download_max' => 'getDownloadMax',
        'guaranteed_upload_min' => 'getGuaranteedUploadMin',
        'guaranteed_upload_max' => 'getGuaranteedUploadMax',
        'guaranteedd_download_min' => 'getGuaranteeddDownloadMin',
        'guaranteedd_download_max' => 'getGuaranteeddDownloadMax',
        'rc_min' => 'getRcMin',
        'rc_max' => 'getRcMax',
        'price_list_items_groups' => 'getPriceListItemsGroups',
        'offer_id' => 'getOfferId',
        'price_list_id' => 'getPriceListId',
        'combinations' => 'getCombinations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('tech', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('grt_min', $data ?? [], null);
        $this->setIfExists('grt_max', $data ?? [], null);
        $this->setIfExists('grt_non_working_hours_option_available', $data ?? [], null);
        $this->setIfExists('grt_non_working_hours_option_mandatory', $data ?? [], null);
        $this->setIfExists('nrc_min', $data ?? [], null);
        $this->setIfExists('nrc_max', $data ?? [], null);
        $this->setIfExists('commitment_min', $data ?? [], null);
        $this->setIfExists('commitment_max', $data ?? [], null);
        $this->setIfExists('upload_min', $data ?? [], null);
        $this->setIfExists('upload_max', $data ?? [], null);
        $this->setIfExists('download_min', $data ?? [], null);
        $this->setIfExists('download_max', $data ?? [], null);
        $this->setIfExists('guaranteed_upload_min', $data ?? [], null);
        $this->setIfExists('guaranteed_upload_max', $data ?? [], null);
        $this->setIfExists('guaranteedd_download_min', $data ?? [], null);
        $this->setIfExists('guaranteedd_download_max', $data ?? [], null);
        $this->setIfExists('rc_min', $data ?? [], null);
        $this->setIfExists('rc_max', $data ?? [], null);
        $this->setIfExists('price_list_items_groups', $data ?? [], null);
        $this->setIfExists('offer_id', $data ?? [], null);
        $this->setIfExists('price_list_id', $data ?? [], null);
        $this->setIfExists('combinations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets tech
     *
     * @return int|null
     */
    public function getTech()
    {
        return $this->container['tech'];
    }

    /**
     * Sets tech
     *
     * @param int|null $tech tech
     *
     * @return self
     */
    public function setTech($tech)
    {
        if (is_null($tech)) {
            throw new \InvalidArgumentException('non-nullable tech cannot be null');
        }
        $this->container['tech'] = $tech;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return int|null
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param int|null $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            array_push($this->openAPINullablesSetToNull, 'delivery');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets grt_min
     *
     * @return int|null
     */
    public function getGrtMin()
    {
        return $this->container['grt_min'];
    }

    /**
     * Sets grt_min
     *
     * @param int|null $grt_min grt_min
     *
     * @return self
     */
    public function setGrtMin($grt_min)
    {
        if (is_null($grt_min)) {
            array_push($this->openAPINullablesSetToNull, 'grt_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grt_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grt_min'] = $grt_min;

        return $this;
    }

    /**
     * Gets grt_max
     *
     * @return int|null
     */
    public function getGrtMax()
    {
        return $this->container['grt_max'];
    }

    /**
     * Sets grt_max
     *
     * @param int|null $grt_max grt_max
     *
     * @return self
     */
    public function setGrtMax($grt_max)
    {
        if (is_null($grt_max)) {
            array_push($this->openAPINullablesSetToNull, 'grt_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grt_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grt_max'] = $grt_max;

        return $this;
    }

    /**
     * Gets grt_non_working_hours_option_available
     *
     * @return bool|null
     */
    public function getGrtNonWorkingHoursOptionAvailable()
    {
        return $this->container['grt_non_working_hours_option_available'];
    }

    /**
     * Sets grt_non_working_hours_option_available
     *
     * @param bool|null $grt_non_working_hours_option_available grt_non_working_hours_option_available
     *
     * @return self
     */
    public function setGrtNonWorkingHoursOptionAvailable($grt_non_working_hours_option_available)
    {
        if (is_null($grt_non_working_hours_option_available)) {
            throw new \InvalidArgumentException('non-nullable grt_non_working_hours_option_available cannot be null');
        }
        $this->container['grt_non_working_hours_option_available'] = $grt_non_working_hours_option_available;

        return $this;
    }

    /**
     * Gets grt_non_working_hours_option_mandatory
     *
     * @return bool|null
     */
    public function getGrtNonWorkingHoursOptionMandatory()
    {
        return $this->container['grt_non_working_hours_option_mandatory'];
    }

    /**
     * Sets grt_non_working_hours_option_mandatory
     *
     * @param bool|null $grt_non_working_hours_option_mandatory grt_non_working_hours_option_mandatory
     *
     * @return self
     */
    public function setGrtNonWorkingHoursOptionMandatory($grt_non_working_hours_option_mandatory)
    {
        if (is_null($grt_non_working_hours_option_mandatory)) {
            throw new \InvalidArgumentException('non-nullable grt_non_working_hours_option_mandatory cannot be null');
        }
        $this->container['grt_non_working_hours_option_mandatory'] = $grt_non_working_hours_option_mandatory;

        return $this;
    }

    /**
     * Gets nrc_min
     *
     * @return int|null
     */
    public function getNrcMin()
    {
        return $this->container['nrc_min'];
    }

    /**
     * Sets nrc_min
     *
     * @param int|null $nrc_min nrc_min
     *
     * @return self
     */
    public function setNrcMin($nrc_min)
    {
        if (is_null($nrc_min)) {
            array_push($this->openAPINullablesSetToNull, 'nrc_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nrc_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nrc_min'] = $nrc_min;

        return $this;
    }

    /**
     * Gets nrc_max
     *
     * @return int|null
     */
    public function getNrcMax()
    {
        return $this->container['nrc_max'];
    }

    /**
     * Sets nrc_max
     *
     * @param int|null $nrc_max nrc_max
     *
     * @return self
     */
    public function setNrcMax($nrc_max)
    {
        if (is_null($nrc_max)) {
            array_push($this->openAPINullablesSetToNull, 'nrc_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nrc_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nrc_max'] = $nrc_max;

        return $this;
    }

    /**
     * Gets commitment_min
     *
     * @return int|null
     */
    public function getCommitmentMin()
    {
        return $this->container['commitment_min'];
    }

    /**
     * Sets commitment_min
     *
     * @param int|null $commitment_min commitment_min
     *
     * @return self
     */
    public function setCommitmentMin($commitment_min)
    {
        if (is_null($commitment_min)) {
            array_push($this->openAPINullablesSetToNull, 'commitment_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commitment_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commitment_min'] = $commitment_min;

        return $this;
    }

    /**
     * Gets commitment_max
     *
     * @return int|null
     */
    public function getCommitmentMax()
    {
        return $this->container['commitment_max'];
    }

    /**
     * Sets commitment_max
     *
     * @param int|null $commitment_max commitment_max
     *
     * @return self
     */
    public function setCommitmentMax($commitment_max)
    {
        if (is_null($commitment_max)) {
            array_push($this->openAPINullablesSetToNull, 'commitment_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commitment_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commitment_max'] = $commitment_max;

        return $this;
    }

    /**
     * Gets upload_min
     *
     * @return int|null
     */
    public function getUploadMin()
    {
        return $this->container['upload_min'];
    }

    /**
     * Sets upload_min
     *
     * @param int|null $upload_min upload_min
     *
     * @return self
     */
    public function setUploadMin($upload_min)
    {
        if (is_null($upload_min)) {
            array_push($this->openAPINullablesSetToNull, 'upload_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upload_min'] = $upload_min;

        return $this;
    }

    /**
     * Gets upload_max
     *
     * @return int|null
     */
    public function getUploadMax()
    {
        return $this->container['upload_max'];
    }

    /**
     * Sets upload_max
     *
     * @param int|null $upload_max upload_max
     *
     * @return self
     */
    public function setUploadMax($upload_max)
    {
        if (is_null($upload_max)) {
            array_push($this->openAPINullablesSetToNull, 'upload_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upload_max'] = $upload_max;

        return $this;
    }

    /**
     * Gets download_min
     *
     * @return int|null
     */
    public function getDownloadMin()
    {
        return $this->container['download_min'];
    }

    /**
     * Sets download_min
     *
     * @param int|null $download_min download_min
     *
     * @return self
     */
    public function setDownloadMin($download_min)
    {
        if (is_null($download_min)) {
            array_push($this->openAPINullablesSetToNull, 'download_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['download_min'] = $download_min;

        return $this;
    }

    /**
     * Gets download_max
     *
     * @return int|null
     */
    public function getDownloadMax()
    {
        return $this->container['download_max'];
    }

    /**
     * Sets download_max
     *
     * @param int|null $download_max download_max
     *
     * @return self
     */
    public function setDownloadMax($download_max)
    {
        if (is_null($download_max)) {
            array_push($this->openAPINullablesSetToNull, 'download_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['download_max'] = $download_max;

        return $this;
    }

    /**
     * Gets guaranteed_upload_min
     *
     * @return int|null
     */
    public function getGuaranteedUploadMin()
    {
        return $this->container['guaranteed_upload_min'];
    }

    /**
     * Sets guaranteed_upload_min
     *
     * @param int|null $guaranteed_upload_min guaranteed_upload_min
     *
     * @return self
     */
    public function setGuaranteedUploadMin($guaranteed_upload_min)
    {
        if (is_null($guaranteed_upload_min)) {
            array_push($this->openAPINullablesSetToNull, 'guaranteed_upload_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guaranteed_upload_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guaranteed_upload_min'] = $guaranteed_upload_min;

        return $this;
    }

    /**
     * Gets guaranteed_upload_max
     *
     * @return int|null
     */
    public function getGuaranteedUploadMax()
    {
        return $this->container['guaranteed_upload_max'];
    }

    /**
     * Sets guaranteed_upload_max
     *
     * @param int|null $guaranteed_upload_max guaranteed_upload_max
     *
     * @return self
     */
    public function setGuaranteedUploadMax($guaranteed_upload_max)
    {
        if (is_null($guaranteed_upload_max)) {
            array_push($this->openAPINullablesSetToNull, 'guaranteed_upload_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guaranteed_upload_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guaranteed_upload_max'] = $guaranteed_upload_max;

        return $this;
    }

    /**
     * Gets guaranteedd_download_min
     *
     * @return int|null
     */
    public function getGuaranteeddDownloadMin()
    {
        return $this->container['guaranteedd_download_min'];
    }

    /**
     * Sets guaranteedd_download_min
     *
     * @param int|null $guaranteedd_download_min guaranteedd_download_min
     *
     * @return self
     */
    public function setGuaranteeddDownloadMin($guaranteedd_download_min)
    {
        if (is_null($guaranteedd_download_min)) {
            array_push($this->openAPINullablesSetToNull, 'guaranteedd_download_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guaranteedd_download_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guaranteedd_download_min'] = $guaranteedd_download_min;

        return $this;
    }

    /**
     * Gets guaranteedd_download_max
     *
     * @return int|null
     */
    public function getGuaranteeddDownloadMax()
    {
        return $this->container['guaranteedd_download_max'];
    }

    /**
     * Sets guaranteedd_download_max
     *
     * @param int|null $guaranteedd_download_max guaranteedd_download_max
     *
     * @return self
     */
    public function setGuaranteeddDownloadMax($guaranteedd_download_max)
    {
        if (is_null($guaranteedd_download_max)) {
            array_push($this->openAPINullablesSetToNull, 'guaranteedd_download_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guaranteedd_download_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guaranteedd_download_max'] = $guaranteedd_download_max;

        return $this;
    }

    /**
     * Gets rc_min
     *
     * @return int|null
     */
    public function getRcMin()
    {
        return $this->container['rc_min'];
    }

    /**
     * Sets rc_min
     *
     * @param int|null $rc_min rc_min
     *
     * @return self
     */
    public function setRcMin($rc_min)
    {
        if (is_null($rc_min)) {
            array_push($this->openAPINullablesSetToNull, 'rc_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rc_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rc_min'] = $rc_min;

        return $this;
    }

    /**
     * Gets rc_max
     *
     * @return int|null
     */
    public function getRcMax()
    {
        return $this->container['rc_max'];
    }

    /**
     * Sets rc_max
     *
     * @param int|null $rc_max rc_max
     *
     * @return self
     */
    public function setRcMax($rc_max)
    {
        if (is_null($rc_max)) {
            array_push($this->openAPINullablesSetToNull, 'rc_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rc_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rc_max'] = $rc_max;

        return $this;
    }

    /**
     * Gets price_list_items_groups
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityResultPriceListItemsGroups|null
     */
    public function getPriceListItemsGroups()
    {
        return $this->container['price_list_items_groups'];
    }

    /**
     * Sets price_list_items_groups
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityResultPriceListItemsGroups|null $price_list_items_groups price_list_items_groups
     *
     * @return self
     */
    public function setPriceListItemsGroups($price_list_items_groups)
    {
        if (is_null($price_list_items_groups)) {
            throw new \InvalidArgumentException('non-nullable price_list_items_groups cannot be null');
        }
        $this->container['price_list_items_groups'] = $price_list_items_groups;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return int|null
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param int|null $offer_id offer_id
     *
     * @return self
     */
    public function setOfferId($offer_id)
    {
        if (is_null($offer_id)) {
            array_push($this->openAPINullablesSetToNull, 'offer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets price_list_id
     *
     * @return int|null
     */
    public function getPriceListId()
    {
        return $this->container['price_list_id'];
    }

    /**
     * Sets price_list_id
     *
     * @param int|null $price_list_id price_list_id
     *
     * @return self
     */
    public function setPriceListId($price_list_id)
    {
        if (is_null($price_list_id)) {
            array_push($this->openAPINullablesSetToNull, 'price_list_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_list_id'] = $price_list_id;

        return $this;
    }

    /**
     * Gets combinations
     *
     * @return \Infracorp\Extranet\Client\Model\EligibilityResultCombination[]|null
     */
    public function getCombinations()
    {
        return $this->container['combinations'];
    }

    /**
     * Sets combinations
     *
     * @param \Infracorp\Extranet\Client\Model\EligibilityResultCombination[]|null $combinations combinations
     *
     * @return self
     */
    public function setCombinations($combinations)
    {
        if (is_null($combinations)) {
            throw new \InvalidArgumentException('non-nullable combinations cannot be null');
        }
        $this->container['combinations'] = $combinations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


