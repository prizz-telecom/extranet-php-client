<?php
/**
 * ServiceContract
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  InfracorpExtranetClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Prizz-Telecom Extranet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfracorpExtranetClient\Model;

use \ArrayAccess;
use \InfracorpExtranetClient\ObjectSerializer;

/**
 * ServiceContract Class Doc Comment
 *
 * @category Class
 * @package  InfracorpExtranetClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceContract implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServiceContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'create_date' => '\DateTime',
        'last_modified_date' => '\DateTime',
        'status' => 'string',
        'client_contract_id' => 'int',
        'subscription_date' => '\DateTime',
        'activation_date' => '\DateTime',
        'offer' => '\InfracorpExtranetClient\Model\Offer',
        'client' => '\InfracorpExtranetClient\Model\ClientLegalEntity',
        'ref_client' => 'string',
        'ref_service' => 'string',
        'description' => 'string',
        'services' => '\InfracorpExtranetClient\Model\Service[]',
        'planned_activation_date' => '\DateTime',
        'sold_activation_date' => '\DateTime',
        'commitment_end_date' => '\DateTime',
        'attributes' => 'object',
        'consolidated_attributes' => 'object',
        'consolidated_attributes_staging_or_new' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'create_date' => 'date-time',
        'last_modified_date' => 'date-time',
        'status' => null,
        'client_contract_id' => null,
        'subscription_date' => 'date-time',
        'activation_date' => 'date-time',
        'offer' => null,
        'client' => null,
        'ref_client' => null,
        'ref_service' => null,
        'description' => null,
        'services' => null,
        'planned_activation_date' => 'date-time',
        'sold_activation_date' => 'date-time',
        'commitment_end_date' => 'date-time',
        'attributes' => null,
        'consolidated_attributes' => null,
        'consolidated_attributes_staging_or_new' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'create_date' => false,
		'last_modified_date' => false,
		'status' => false,
		'client_contract_id' => false,
		'subscription_date' => false,
		'activation_date' => false,
		'offer' => false,
		'client' => false,
		'ref_client' => false,
		'ref_service' => false,
		'description' => false,
		'services' => false,
		'planned_activation_date' => false,
		'sold_activation_date' => false,
		'commitment_end_date' => false,
		'attributes' => false,
		'consolidated_attributes' => false,
		'consolidated_attributes_staging_or_new' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'create_date' => 'createDate',
        'last_modified_date' => 'lastModifiedDate',
        'status' => 'status',
        'client_contract_id' => 'clientContractId',
        'subscription_date' => 'subscriptionDate',
        'activation_date' => 'activationDate',
        'offer' => 'offer',
        'client' => 'client',
        'ref_client' => 'refClient',
        'ref_service' => 'refService',
        'description' => 'description',
        'services' => 'services',
        'planned_activation_date' => 'plannedActivationDate',
        'sold_activation_date' => 'soldActivationDate',
        'commitment_end_date' => 'commitmentEndDate',
        'attributes' => 'attributes',
        'consolidated_attributes' => 'consolidatedAttributes',
        'consolidated_attributes_staging_or_new' => 'consolidatedAttributesStagingOrNew'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'create_date' => 'setCreateDate',
        'last_modified_date' => 'setLastModifiedDate',
        'status' => 'setStatus',
        'client_contract_id' => 'setClientContractId',
        'subscription_date' => 'setSubscriptionDate',
        'activation_date' => 'setActivationDate',
        'offer' => 'setOffer',
        'client' => 'setClient',
        'ref_client' => 'setRefClient',
        'ref_service' => 'setRefService',
        'description' => 'setDescription',
        'services' => 'setServices',
        'planned_activation_date' => 'setPlannedActivationDate',
        'sold_activation_date' => 'setSoldActivationDate',
        'commitment_end_date' => 'setCommitmentEndDate',
        'attributes' => 'setAttributes',
        'consolidated_attributes' => 'setConsolidatedAttributes',
        'consolidated_attributes_staging_or_new' => 'setConsolidatedAttributesStagingOrNew'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'create_date' => 'getCreateDate',
        'last_modified_date' => 'getLastModifiedDate',
        'status' => 'getStatus',
        'client_contract_id' => 'getClientContractId',
        'subscription_date' => 'getSubscriptionDate',
        'activation_date' => 'getActivationDate',
        'offer' => 'getOffer',
        'client' => 'getClient',
        'ref_client' => 'getRefClient',
        'ref_service' => 'getRefService',
        'description' => 'getDescription',
        'services' => 'getServices',
        'planned_activation_date' => 'getPlannedActivationDate',
        'sold_activation_date' => 'getSoldActivationDate',
        'commitment_end_date' => 'getCommitmentEndDate',
        'attributes' => 'getAttributes',
        'consolidated_attributes' => 'getConsolidatedAttributes',
        'consolidated_attributes_staging_or_new' => 'getConsolidatedAttributesStagingOrNew'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('client_contract_id', $data ?? [], null);
        $this->setIfExists('subscription_date', $data ?? [], null);
        $this->setIfExists('activation_date', $data ?? [], null);
        $this->setIfExists('offer', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('ref_client', $data ?? [], null);
        $this->setIfExists('ref_service', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('planned_activation_date', $data ?? [], null);
        $this->setIfExists('sold_activation_date', $data ?? [], null);
        $this->setIfExists('commitment_end_date', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('consolidated_attributes', $data ?? [], null);
        $this->setIfExists('consolidated_attributes_staging_or_new', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date create_date
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets client_contract_id
     *
     * @return int|null
     */
    public function getClientContractId()
    {
        return $this->container['client_contract_id'];
    }

    /**
     * Sets client_contract_id
     *
     * @param int|null $client_contract_id client_contract_id
     *
     * @return self
     */
    public function setClientContractId($client_contract_id)
    {
        if (is_null($client_contract_id)) {
            throw new \InvalidArgumentException('non-nullable client_contract_id cannot be null');
        }
        $this->container['client_contract_id'] = $client_contract_id;

        return $this;
    }

    /**
     * Gets subscription_date
     *
     * @return \DateTime|null
     */
    public function getSubscriptionDate()
    {
        return $this->container['subscription_date'];
    }

    /**
     * Sets subscription_date
     *
     * @param \DateTime|null $subscription_date subscription_date
     *
     * @return self
     */
    public function setSubscriptionDate($subscription_date)
    {
        if (is_null($subscription_date)) {
            throw new \InvalidArgumentException('non-nullable subscription_date cannot be null');
        }
        $this->container['subscription_date'] = $subscription_date;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return \DateTime|null
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param \DateTime|null $activation_date activation_date
     *
     * @return self
     */
    public function setActivationDate($activation_date)
    {
        if (is_null($activation_date)) {
            throw new \InvalidArgumentException('non-nullable activation_date cannot be null');
        }
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return \InfracorpExtranetClient\Model\Offer|null
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param \InfracorpExtranetClient\Model\Offer|null $offer offer
     *
     * @return self
     */
    public function setOffer($offer)
    {
        if (is_null($offer)) {
            throw new \InvalidArgumentException('non-nullable offer cannot be null');
        }
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \InfracorpExtranetClient\Model\ClientLegalEntity|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \InfracorpExtranetClient\Model\ClientLegalEntity|null $client client
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            throw new \InvalidArgumentException('non-nullable client cannot be null');
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets ref_client
     *
     * @return string|null
     */
    public function getRefClient()
    {
        return $this->container['ref_client'];
    }

    /**
     * Sets ref_client
     *
     * @param string|null $ref_client ref set by customer
     *
     * @return self
     */
    public function setRefClient($ref_client)
    {
        if (is_null($ref_client)) {
            throw new \InvalidArgumentException('non-nullable ref_client cannot be null');
        }
        $this->container['ref_client'] = $ref_client;

        return $this;
    }

    /**
     * Gets ref_service
     *
     * @return string|null
     */
    public function getRefService()
    {
        return $this->container['ref_service'];
    }

    /**
     * Sets ref_service
     *
     * @param string|null $ref_service ref used by Prizz Telecom NOC
     *
     * @return self
     */
    public function setRefService($ref_service)
    {
        if (is_null($ref_service)) {
            throw new \InvalidArgumentException('non-nullable ref_service cannot be null');
        }
        $this->container['ref_service'] = $ref_service;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \InfracorpExtranetClient\Model\Service[]|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \InfracorpExtranetClient\Model\Service[]|null $services services
     *
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            throw new \InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets planned_activation_date
     *
     * @return \DateTime|null
     */
    public function getPlannedActivationDate()
    {
        return $this->container['planned_activation_date'];
    }

    /**
     * Sets planned_activation_date
     *
     * @param \DateTime|null $planned_activation_date planned_activation_date
     *
     * @return self
     */
    public function setPlannedActivationDate($planned_activation_date)
    {
        if (is_null($planned_activation_date)) {
            throw new \InvalidArgumentException('non-nullable planned_activation_date cannot be null');
        }
        $this->container['planned_activation_date'] = $planned_activation_date;

        return $this;
    }

    /**
     * Gets sold_activation_date
     *
     * @return \DateTime|null
     */
    public function getSoldActivationDate()
    {
        return $this->container['sold_activation_date'];
    }

    /**
     * Sets sold_activation_date
     *
     * @param \DateTime|null $sold_activation_date sold_activation_date
     *
     * @return self
     */
    public function setSoldActivationDate($sold_activation_date)
    {
        if (is_null($sold_activation_date)) {
            throw new \InvalidArgumentException('non-nullable sold_activation_date cannot be null');
        }
        $this->container['sold_activation_date'] = $sold_activation_date;

        return $this;
    }

    /**
     * Gets commitment_end_date
     *
     * @return \DateTime|null
     */
    public function getCommitmentEndDate()
    {
        return $this->container['commitment_end_date'];
    }

    /**
     * Sets commitment_end_date
     *
     * @param \DateTime|null $commitment_end_date commitment_end_date
     *
     * @return self
     */
    public function setCommitmentEndDate($commitment_end_date)
    {
        if (is_null($commitment_end_date)) {
            throw new \InvalidArgumentException('non-nullable commitment_end_date cannot be null');
        }
        $this->container['commitment_end_date'] = $commitment_end_date;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return object|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param object|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets consolidated_attributes
     *
     * @return object|null
     */
    public function getConsolidatedAttributes()
    {
        return $this->container['consolidated_attributes'];
    }

    /**
     * Sets consolidated_attributes
     *
     * @param object|null $consolidated_attributes consolidated_attributes
     *
     * @return self
     */
    public function setConsolidatedAttributes($consolidated_attributes)
    {
        if (is_null($consolidated_attributes)) {
            throw new \InvalidArgumentException('non-nullable consolidated_attributes cannot be null');
        }
        $this->container['consolidated_attributes'] = $consolidated_attributes;

        return $this;
    }

    /**
     * Gets consolidated_attributes_staging_or_new
     *
     * @return object|null
     */
    public function getConsolidatedAttributesStagingOrNew()
    {
        return $this->container['consolidated_attributes_staging_or_new'];
    }

    /**
     * Sets consolidated_attributes_staging_or_new
     *
     * @param object|null $consolidated_attributes_staging_or_new consolidated_attributes_staging_or_new
     *
     * @return self
     */
    public function setConsolidatedAttributesStagingOrNew($consolidated_attributes_staging_or_new)
    {
        if (is_null($consolidated_attributes_staging_or_new)) {
            throw new \InvalidArgumentException('non-nullable consolidated_attributes_staging_or_new cannot be null');
        }
        $this->container['consolidated_attributes_staging_or_new'] = $consolidated_attributes_staging_or_new;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


