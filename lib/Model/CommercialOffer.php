<?php
/**
 * CommercialOffer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Prizz-Telecom Extranet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Infracorp\Extranet\Client\Model;

use \ArrayAccess;
use \Infracorp\Extranet\Client\ObjectSerializer;

/**
 * CommercialOffer Class Doc Comment
 *
 * @category Class
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommercialOffer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CommercialOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'create_date' => '\DateTime',
        'last_modified_date' => '\DateTime',
        'notes' => 'string',
        'rc_total' => 'array<string,int>',
        'rc_vat_total' => 'array<string,int>',
        'nrc_total' => 'int',
        'nrc_vat_total' => 'int',
        'status' => 'string',
        'legal_entity' => '\Infracorp\Extranet\Client\Model\LegalEntity',
        'client_legal_entity' => '\Infracorp\Extranet\Client\Model\ClientLegalEntity',
        'sign_date' => '\DateTime',
        'submit_date' => '\DateTime',
        'delivery_delay' => 'int',
        'total' => 'int',
        'vat_total' => 'int',
        'vat_detail' => '\Infracorp\Extranet\Client\Model\CommercialOfferVatDetailInner[]',
        'sections' => '\Infracorp\Extranet\Client\Model\CommercialOfferSection[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'create_date' => 'date-time',
        'last_modified_date' => 'date-time',
        'notes' => null,
        'rc_total' => null,
        'rc_vat_total' => null,
        'nrc_total' => null,
        'nrc_vat_total' => null,
        'status' => null,
        'legal_entity' => null,
        'client_legal_entity' => null,
        'sign_date' => 'date-time',
        'submit_date' => 'date-time',
        'delivery_delay' => null,
        'total' => null,
        'vat_total' => null,
        'vat_detail' => null,
        'sections' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'create_date' => false,
		'last_modified_date' => false,
		'notes' => false,
		'rc_total' => false,
		'rc_vat_total' => false,
		'nrc_total' => false,
		'nrc_vat_total' => false,
		'status' => false,
		'legal_entity' => false,
		'client_legal_entity' => false,
		'sign_date' => false,
		'submit_date' => false,
		'delivery_delay' => false,
		'total' => false,
		'vat_total' => false,
		'vat_detail' => false,
		'sections' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'create_date' => 'createDate',
        'last_modified_date' => 'lastModifiedDate',
        'notes' => 'notes',
        'rc_total' => 'rcTotal',
        'rc_vat_total' => 'rcVATTotal',
        'nrc_total' => 'nrcTotal',
        'nrc_vat_total' => 'nrcVATTotal',
        'status' => 'status',
        'legal_entity' => 'legalEntity',
        'client_legal_entity' => 'clientLegalEntity',
        'sign_date' => 'signDate',
        'submit_date' => 'submitDate',
        'delivery_delay' => 'deliveryDelay',
        'total' => 'total',
        'vat_total' => 'vatTotal',
        'vat_detail' => 'vatDetail',
        'sections' => 'sections'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'create_date' => 'setCreateDate',
        'last_modified_date' => 'setLastModifiedDate',
        'notes' => 'setNotes',
        'rc_total' => 'setRcTotal',
        'rc_vat_total' => 'setRcVatTotal',
        'nrc_total' => 'setNrcTotal',
        'nrc_vat_total' => 'setNrcVatTotal',
        'status' => 'setStatus',
        'legal_entity' => 'setLegalEntity',
        'client_legal_entity' => 'setClientLegalEntity',
        'sign_date' => 'setSignDate',
        'submit_date' => 'setSubmitDate',
        'delivery_delay' => 'setDeliveryDelay',
        'total' => 'setTotal',
        'vat_total' => 'setVatTotal',
        'vat_detail' => 'setVatDetail',
        'sections' => 'setSections'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'create_date' => 'getCreateDate',
        'last_modified_date' => 'getLastModifiedDate',
        'notes' => 'getNotes',
        'rc_total' => 'getRcTotal',
        'rc_vat_total' => 'getRcVatTotal',
        'nrc_total' => 'getNrcTotal',
        'nrc_vat_total' => 'getNrcVatTotal',
        'status' => 'getStatus',
        'legal_entity' => 'getLegalEntity',
        'client_legal_entity' => 'getClientLegalEntity',
        'sign_date' => 'getSignDate',
        'submit_date' => 'getSubmitDate',
        'delivery_delay' => 'getDeliveryDelay',
        'total' => 'getTotal',
        'vat_total' => 'getVatTotal',
        'vat_detail' => 'getVatDetail',
        'sections' => 'getSections'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('rc_total', $data ?? [], null);
        $this->setIfExists('rc_vat_total', $data ?? [], null);
        $this->setIfExists('nrc_total', $data ?? [], null);
        $this->setIfExists('nrc_vat_total', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('legal_entity', $data ?? [], null);
        $this->setIfExists('client_legal_entity', $data ?? [], null);
        $this->setIfExists('sign_date', $data ?? [], null);
        $this->setIfExists('submit_date', $data ?? [], null);
        $this->setIfExists('delivery_delay', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('vat_total', $data ?? [], null);
        $this->setIfExists('vat_detail', $data ?? [], null);
        $this->setIfExists('sections', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date create_date
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets rc_total
     *
     * @return array<string,int>|null
     */
    public function getRcTotal()
    {
        return $this->container['rc_total'];
    }

    /**
     * Sets rc_total
     *
     * @param array<string,int>|null $rc_total rc_total
     *
     * @return self
     */
    public function setRcTotal($rc_total)
    {
        if (is_null($rc_total)) {
            throw new \InvalidArgumentException('non-nullable rc_total cannot be null');
        }
        $this->container['rc_total'] = $rc_total;

        return $this;
    }

    /**
     * Gets rc_vat_total
     *
     * @return array<string,int>|null
     */
    public function getRcVatTotal()
    {
        return $this->container['rc_vat_total'];
    }

    /**
     * Sets rc_vat_total
     *
     * @param array<string,int>|null $rc_vat_total rc_vat_total
     *
     * @return self
     */
    public function setRcVatTotal($rc_vat_total)
    {
        if (is_null($rc_vat_total)) {
            throw new \InvalidArgumentException('non-nullable rc_vat_total cannot be null');
        }
        $this->container['rc_vat_total'] = $rc_vat_total;

        return $this;
    }

    /**
     * Gets nrc_total
     *
     * @return int|null
     */
    public function getNrcTotal()
    {
        return $this->container['nrc_total'];
    }

    /**
     * Sets nrc_total
     *
     * @param int|null $nrc_total nrc_total
     *
     * @return self
     */
    public function setNrcTotal($nrc_total)
    {
        if (is_null($nrc_total)) {
            throw new \InvalidArgumentException('non-nullable nrc_total cannot be null');
        }
        $this->container['nrc_total'] = $nrc_total;

        return $this;
    }

    /**
     * Gets nrc_vat_total
     *
     * @return int|null
     */
    public function getNrcVatTotal()
    {
        return $this->container['nrc_vat_total'];
    }

    /**
     * Sets nrc_vat_total
     *
     * @param int|null $nrc_vat_total nrc_vat_total
     *
     * @return self
     */
    public function setNrcVatTotal($nrc_vat_total)
    {
        if (is_null($nrc_vat_total)) {
            throw new \InvalidArgumentException('non-nullable nrc_vat_total cannot be null');
        }
        $this->container['nrc_vat_total'] = $nrc_vat_total;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets legal_entity
     *
     * @return \Infracorp\Extranet\Client\Model\LegalEntity|null
     */
    public function getLegalEntity()
    {
        return $this->container['legal_entity'];
    }

    /**
     * Sets legal_entity
     *
     * @param \Infracorp\Extranet\Client\Model\LegalEntity|null $legal_entity legal_entity
     *
     * @return self
     */
    public function setLegalEntity($legal_entity)
    {
        if (is_null($legal_entity)) {
            throw new \InvalidArgumentException('non-nullable legal_entity cannot be null');
        }
        $this->container['legal_entity'] = $legal_entity;

        return $this;
    }

    /**
     * Gets client_legal_entity
     *
     * @return \Infracorp\Extranet\Client\Model\ClientLegalEntity|null
     */
    public function getClientLegalEntity()
    {
        return $this->container['client_legal_entity'];
    }

    /**
     * Sets client_legal_entity
     *
     * @param \Infracorp\Extranet\Client\Model\ClientLegalEntity|null $client_legal_entity client_legal_entity
     *
     * @return self
     */
    public function setClientLegalEntity($client_legal_entity)
    {
        if (is_null($client_legal_entity)) {
            throw new \InvalidArgumentException('non-nullable client_legal_entity cannot be null');
        }
        $this->container['client_legal_entity'] = $client_legal_entity;

        return $this;
    }

    /**
     * Gets sign_date
     *
     * @return \DateTime|null
     */
    public function getSignDate()
    {
        return $this->container['sign_date'];
    }

    /**
     * Sets sign_date
     *
     * @param \DateTime|null $sign_date sign_date
     *
     * @return self
     */
    public function setSignDate($sign_date)
    {
        if (is_null($sign_date)) {
            throw new \InvalidArgumentException('non-nullable sign_date cannot be null');
        }
        $this->container['sign_date'] = $sign_date;

        return $this;
    }

    /**
     * Gets submit_date
     *
     * @return \DateTime|null
     */
    public function getSubmitDate()
    {
        return $this->container['submit_date'];
    }

    /**
     * Sets submit_date
     *
     * @param \DateTime|null $submit_date submit_date
     *
     * @return self
     */
    public function setSubmitDate($submit_date)
    {
        if (is_null($submit_date)) {
            throw new \InvalidArgumentException('non-nullable submit_date cannot be null');
        }
        $this->container['submit_date'] = $submit_date;

        return $this;
    }

    /**
     * Gets delivery_delay
     *
     * @return int|null
     */
    public function getDeliveryDelay()
    {
        return $this->container['delivery_delay'];
    }

    /**
     * Sets delivery_delay
     *
     * @param int|null $delivery_delay delivery_delay
     *
     * @return self
     */
    public function setDeliveryDelay($delivery_delay)
    {
        if (is_null($delivery_delay)) {
            throw new \InvalidArgumentException('non-nullable delivery_delay cannot be null');
        }
        $this->container['delivery_delay'] = $delivery_delay;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets vat_total
     *
     * @return int|null
     */
    public function getVatTotal()
    {
        return $this->container['vat_total'];
    }

    /**
     * Sets vat_total
     *
     * @param int|null $vat_total vat_total
     *
     * @return self
     */
    public function setVatTotal($vat_total)
    {
        if (is_null($vat_total)) {
            throw new \InvalidArgumentException('non-nullable vat_total cannot be null');
        }
        $this->container['vat_total'] = $vat_total;

        return $this;
    }

    /**
     * Gets vat_detail
     *
     * @return \Infracorp\Extranet\Client\Model\CommercialOfferVatDetailInner[]|null
     */
    public function getVatDetail()
    {
        return $this->container['vat_detail'];
    }

    /**
     * Sets vat_detail
     *
     * @param \Infracorp\Extranet\Client\Model\CommercialOfferVatDetailInner[]|null $vat_detail vat_detail
     *
     * @return self
     */
    public function setVatDetail($vat_detail)
    {
        if (is_null($vat_detail)) {
            throw new \InvalidArgumentException('non-nullable vat_detail cannot be null');
        }
        $this->container['vat_detail'] = $vat_detail;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \Infracorp\Extranet\Client\Model\CommercialOfferSection[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \Infracorp\Extranet\Client\Model\CommercialOfferSection[]|null $sections sections
     *
     * @return self
     */
    public function setSections($sections)
    {
        if (is_null($sections)) {
            throw new \InvalidArgumentException('non-nullable sections cannot be null');
        }
        $this->container['sections'] = $sections;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


