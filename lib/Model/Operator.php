<?php
/**
 * Operator
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  InfracorpExtranetClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Prizz-Telecom Extranet API
 *
 * Prizz-Telecom Extranet API https://dev.prizz-telecom.fr/
 *
 * The version of the OpenAPI document: 1.2.18
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace InfracorpExtranetClient\Model;

use \ArrayAccess;
use \InfracorpExtranetClient\ObjectSerializer;

/**
 * Operator Class Doc Comment
 *
 * @category Class
 * @package  InfracorpExtranetClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Operator implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Operator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'lib' => 'string',
        'delivery_doors' => 'mixed[]',
        'hosting_items' => 'mixed[]',
        'l2_services' => 'mixed[]',
        'fon_services' => 'mixed[]',
        'acces_internet_services' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'lib' => null,
        'delivery_doors' => null,
        'hosting_items' => null,
        'l2_services' => null,
        'fon_services' => null,
        'acces_internet_services' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => true,
        'lib' => true,
        'delivery_doors' => false,
        'hosting_items' => false,
        'l2_services' => false,
        'fon_services' => false,
        'acces_internet_services' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'lib' => 'lib',
        'delivery_doors' => 'delivery_doors',
        'hosting_items' => 'hosting_items',
        'l2_services' => 'l2_services',
        'fon_services' => 'fon_services',
        'acces_internet_services' => 'acces_internet_services'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'lib' => 'setLib',
        'delivery_doors' => 'setDeliveryDoors',
        'hosting_items' => 'setHostingItems',
        'l2_services' => 'setL2Services',
        'fon_services' => 'setFonServices',
        'acces_internet_services' => 'setAccesInternetServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'lib' => 'getLib',
        'delivery_doors' => 'getDeliveryDoors',
        'hosting_items' => 'getHostingItems',
        'l2_services' => 'getL2Services',
        'fon_services' => 'getFonServices',
        'acces_internet_services' => 'getAccesInternetServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('lib', $data ?? [], null);
        $this->setIfExists('delivery_doors', $data ?? [], null);
        $this->setIfExists('hosting_items', $data ?? [], null);
        $this->setIfExists('l2_services', $data ?? [], null);
        $this->setIfExists('fon_services', $data ?? [], null);
        $this->setIfExists('acces_internet_services', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets lib
     *
     * @return string|null
     */
    public function getLib()
    {
        return $this->container['lib'];
    }

    /**
     * Sets lib
     *
     * @param string|null $lib lib
     *
     * @return self
     */
    public function setLib($lib)
    {
        if (is_null($lib)) {
            array_push($this->openAPINullablesSetToNull, 'lib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lib'] = $lib;

        return $this;
    }

    /**
     * Gets delivery_doors
     *
     * @return mixed[]|null
     */
    public function getDeliveryDoors()
    {
        return $this->container['delivery_doors'];
    }

    /**
     * Sets delivery_doors
     *
     * @param mixed[]|null $delivery_doors delivery_doors
     *
     * @return self
     */
    public function setDeliveryDoors($delivery_doors)
    {
        if (is_null($delivery_doors)) {
            throw new \InvalidArgumentException('non-nullable delivery_doors cannot be null');
        }
        $this->container['delivery_doors'] = $delivery_doors;

        return $this;
    }

    /**
     * Gets hosting_items
     *
     * @return mixed[]|null
     */
    public function getHostingItems()
    {
        return $this->container['hosting_items'];
    }

    /**
     * Sets hosting_items
     *
     * @param mixed[]|null $hosting_items hosting_items
     *
     * @return self
     */
    public function setHostingItems($hosting_items)
    {
        if (is_null($hosting_items)) {
            throw new \InvalidArgumentException('non-nullable hosting_items cannot be null');
        }
        $this->container['hosting_items'] = $hosting_items;

        return $this;
    }

    /**
     * Gets l2_services
     *
     * @return mixed[]|null
     */
    public function getL2Services()
    {
        return $this->container['l2_services'];
    }

    /**
     * Sets l2_services
     *
     * @param mixed[]|null $l2_services l2_services
     *
     * @return self
     */
    public function setL2Services($l2_services)
    {
        if (is_null($l2_services)) {
            throw new \InvalidArgumentException('non-nullable l2_services cannot be null');
        }
        $this->container['l2_services'] = $l2_services;

        return $this;
    }

    /**
     * Gets fon_services
     *
     * @return mixed[]|null
     */
    public function getFonServices()
    {
        return $this->container['fon_services'];
    }

    /**
     * Sets fon_services
     *
     * @param mixed[]|null $fon_services fon_services
     *
     * @return self
     */
    public function setFonServices($fon_services)
    {
        if (is_null($fon_services)) {
            throw new \InvalidArgumentException('non-nullable fon_services cannot be null');
        }
        $this->container['fon_services'] = $fon_services;

        return $this;
    }

    /**
     * Gets acces_internet_services
     *
     * @return mixed[]|null
     */
    public function getAccesInternetServices()
    {
        return $this->container['acces_internet_services'];
    }

    /**
     * Sets acces_internet_services
     *
     * @param mixed[]|null $acces_internet_services acces_internet_services
     *
     * @return self
     */
    public function setAccesInternetServices($acces_internet_services)
    {
        if (is_null($acces_internet_services)) {
            throw new \InvalidArgumentException('non-nullable acces_internet_services cannot be null');
        }
        $this->container['acces_internet_services'] = $acces_internet_services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


