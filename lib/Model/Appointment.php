<?php
/**
 * Appointment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Prizz-Telecom Extranet API
 *
 * Prizz-Telecom Extranet API https://dev.prizz-telecom.fr/
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Infracorp\Extranet\Client\Model;

use \ArrayAccess;
use \Infracorp\Extranet\Client\ObjectSerializer;

/**
 * Appointment Class Doc Comment
 *
 * @category Class
 * @package  Infracorp\Extranet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Appointment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Appointment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'available_workflows' => 'string[]',
        'id' => 'int',
        'name' => 'string',
        'create_date' => '\DateTime',
        'last_modified_date' => '\DateTime',
        'house_number' => 'int',
        'house_number_complement' => 'string',
        'street_name' => 'string',
        'postal_code' => 'string',
        'city_name' => 'string',
        'insee_code' => 'string',
        'service_contract' => '\Infracorp\Extranet\Client\Model\AppointmentServiceContract',
        'contact' => '\Infracorp\Extranet\Client\Model\AppointmentContact',
        'tech' => '\Infracorp\Extranet\Client\Model\AppointmentTech',
        'date' => '\DateTime',
        'accepted' => 'bool',
        'status' => 'string',
        'type' => 'string',
        'confirmation_process_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'available_workflows' => null,
        'id' => null,
        'name' => null,
        'create_date' => 'date-time',
        'last_modified_date' => 'date-time',
        'house_number' => null,
        'house_number_complement' => null,
        'street_name' => null,
        'postal_code' => null,
        'city_name' => null,
        'insee_code' => null,
        'service_contract' => null,
        'contact' => null,
        'tech' => null,
        'date' => 'date-time',
        'accepted' => null,
        'status' => null,
        'type' => null,
        'confirmation_process_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'available_workflows' => false,
        'id' => false,
        'name' => false,
        'create_date' => false,
        'last_modified_date' => true,
        'house_number' => true,
        'house_number_complement' => true,
        'street_name' => true,
        'postal_code' => true,
        'city_name' => true,
        'insee_code' => true,
        'service_contract' => true,
        'contact' => true,
        'tech' => true,
        'date' => true,
        'accepted' => false,
        'status' => true,
        'type' => true,
        'confirmation_process_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available_workflows' => 'availableWorkflows',
        'id' => 'id',
        'name' => 'name',
        'create_date' => 'createDate',
        'last_modified_date' => 'lastModifiedDate',
        'house_number' => 'houseNumber',
        'house_number_complement' => 'houseNumberComplement',
        'street_name' => 'streetName',
        'postal_code' => 'postalCode',
        'city_name' => 'cityName',
        'insee_code' => 'inseeCode',
        'service_contract' => 'serviceContract',
        'contact' => 'contact',
        'tech' => 'tech',
        'date' => 'date',
        'accepted' => 'accepted',
        'status' => 'status',
        'type' => 'type',
        'confirmation_process_id' => 'confirmationProcessId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available_workflows' => 'setAvailableWorkflows',
        'id' => 'setId',
        'name' => 'setName',
        'create_date' => 'setCreateDate',
        'last_modified_date' => 'setLastModifiedDate',
        'house_number' => 'setHouseNumber',
        'house_number_complement' => 'setHouseNumberComplement',
        'street_name' => 'setStreetName',
        'postal_code' => 'setPostalCode',
        'city_name' => 'setCityName',
        'insee_code' => 'setInseeCode',
        'service_contract' => 'setServiceContract',
        'contact' => 'setContact',
        'tech' => 'setTech',
        'date' => 'setDate',
        'accepted' => 'setAccepted',
        'status' => 'setStatus',
        'type' => 'setType',
        'confirmation_process_id' => 'setConfirmationProcessId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available_workflows' => 'getAvailableWorkflows',
        'id' => 'getId',
        'name' => 'getName',
        'create_date' => 'getCreateDate',
        'last_modified_date' => 'getLastModifiedDate',
        'house_number' => 'getHouseNumber',
        'house_number_complement' => 'getHouseNumberComplement',
        'street_name' => 'getStreetName',
        'postal_code' => 'getPostalCode',
        'city_name' => 'getCityName',
        'insee_code' => 'getInseeCode',
        'service_contract' => 'getServiceContract',
        'contact' => 'getContact',
        'tech' => 'getTech',
        'date' => 'getDate',
        'accepted' => 'getAccepted',
        'status' => 'getStatus',
        'type' => 'getType',
        'confirmation_process_id' => 'getConfirmationProcessId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_CREATE_COMMERCIAL_OFFER_CONTEXT = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_SUBMIT_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_SIGN_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_RENAME_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_ADD_SECTION_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_REMOVE_SECTION_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_RENAME_SECTION_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_OFFER_ITEM_IN_OFFER_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_SET_OFFER_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_ADD_COMMENT_CONTEXT = 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_SUBSCRIBE_THREAD_CONTEXT = 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_UPDATE_COMMENT_CONTEXT = 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_UPDATE_THREAD_CONTEXT = 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_CREATE_COMMENT_THREAD_CONTEXT = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_CREATE_COMMENT_THREAD_CONTEXT = 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_INVOICE_CREATE_COMMENT_THREAD_CONTEXT = 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_CREATE_COMMENT_THREAD_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_USERS_CREATE_TOKEN_CONTEXT = 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_USERS_REVOKE_TOKEN_CONTEXT = 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_SUBSCRIBERS_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_ADD_ITEM_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_REMOVE_ITEM_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_SECTION_ITEMS_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_ASSIGN_CONTACT_CONTEXT = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_ADD_CONTACT_CONTEXT = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_CONTACT_SWITCH_ACTIVE_CONTEXT = 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CONTACT_UPDATE_CONTEXT = 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_UPDATE_DESCRIPTION_CONTEXT = 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_UPDATE_CLIENT_REF_CONTEXT = 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_ACTIVATION_SETUP_L2_CONTEXT = 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_CLIENT_REF_SECTION_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_ASSIGN_CONTACT_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_ASSIGN_CONTACT_CONTEXT = 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_CONTACT_SWITCH_ACTIVE_CONTEXT = 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_CONTACT_SWITCH_ACTIVE_CONTEXT = 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_USERS_SWITCH_ACTIVE_ROLE_CONTEXT = 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_ADD_USER_ROLE_CONTEXT = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CHANGE_CONTACT_CONTEXT = 'Infracorp\\Services\\Workflow\\Appointment\\ChangeContact\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CUSTOMER_CANCEL_CONTEXT = 'Infracorp\\Services\\Workflow\\Appointment\\CustomerCancel\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CUSTOMER_CHANGE_DATE_CONTEXT = 'Infracorp\\Services\\Workflow\\Appointment\\CustomerChangeDate\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CUSTOMER_CONFIRM_CONTEXT = 'Infracorp\\Services\\Workflow\\Appointment\\CustomerConfirm\\Context';
    public const AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_MIGRATE_COAX_TO_L2_PREMIUM_CONTEXT = 'Infracorp\\Services\\Workflow\\ServiceContract\\MigrateCoaxToL2Premium\\Context';
    public const STATUS_TO_PLAN = 'to_plan';
    public const STATUS_NEED_CONFIRM = 'need_confirm';
    public const STATUS_PLANNED = 'planned';
    public const STATUS_CANCELED = 'canceled';
    public const STATUS_MISSING_CUSTROMER = 'missing_custromer';
    public const STATUS_MISSING_TECHNICIAN = 'missing_technician';
    public const STATUS_TERMINATED = 'terminated';
    public const TYPE_TECHNICAL_TOUR = 'technical_tour';
    public const TYPE_CONNECTION_WITH_ACTIVATION = 'connection_with_activation';
    public const TYPE_CONNECTION_WITHOUT_ACTIVATION = 'connection_without_activation';
    public const TYPE_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvailableWorkflowsAllowableValues()
    {
        return [
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_CREATE_COMMERCIAL_OFFER_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_SUBMIT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_SIGN_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_RENAME_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_ADD_SECTION_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_REMOVE_SECTION_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_RENAME_SECTION_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_OFFER_ITEM_IN_OFFER_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_SET_OFFER_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_ADD_COMMENT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_SUBSCRIBE_THREAD_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_UPDATE_COMMENT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMENT_UPDATE_THREAD_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_CREATE_COMMENT_THREAD_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_CREATE_COMMENT_THREAD_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_INVOICE_CREATE_COMMENT_THREAD_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_CREATE_COMMENT_THREAD_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_USERS_CREATE_TOKEN_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_USERS_REVOKE_TOKEN_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_SUBSCRIBERS_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_ADD_ITEM_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_REMOVE_ITEM_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_SECTION_ITEMS_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_ASSIGN_CONTACT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_ADD_CONTACT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_CONTACT_SWITCH_ACTIVE_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CONTACT_UPDATE_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_UPDATE_DESCRIPTION_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_UPDATE_CLIENT_REF_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_ACTIVATION_SETUP_L2_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_UPDATE_CLIENT_REF_SECTION_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_ASSIGN_CONTACT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_ASSIGN_CONTACT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_CONTACT_SWITCH_ACTIVE_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_COMMERCIAL_OFFER_CONTACT_SWITCH_ACTIVE_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_USERS_SWITCH_ACTIVE_ROLE_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_CLIENT_LEGAL_ENTITY_ADD_USER_ROLE_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CHANGE_CONTACT_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CUSTOMER_CANCEL_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CUSTOMER_CHANGE_DATE_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_APPOINTMENT_CUSTOMER_CONFIRM_CONTEXT,
            self::AVAILABLE_WORKFLOWS_INFRACORP_SERVICES_WORKFLOW_SERVICE_CONTRACT_MIGRATE_COAX_TO_L2_PREMIUM_CONTEXT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_TO_PLAN,
            self::STATUS_NEED_CONFIRM,
            self::STATUS_PLANNED,
            self::STATUS_CANCELED,
            self::STATUS_MISSING_CUSTROMER,
            self::STATUS_MISSING_TECHNICIAN,
            self::STATUS_TERMINATED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TECHNICAL_TOUR,
            self::TYPE_CONNECTION_WITH_ACTIVATION,
            self::TYPE_CONNECTION_WITHOUT_ACTIVATION,
            self::TYPE_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('available_workflows', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('house_number_complement', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('insee_code', $data ?? [], null);
        $this->setIfExists('service_contract', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('tech', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('accepted', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('confirmation_process_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets available_workflows
     *
     * @return string[]|null
     */
    public function getAvailableWorkflows()
    {
        return $this->container['available_workflows'];
    }

    /**
     * Sets available_workflows
     *
     * @param string[]|null $available_workflows liste des processus disponible pour l'objet
     *
     * @return self
     */
    public function setAvailableWorkflows($available_workflows)
    {
        if (is_null($available_workflows)) {
            throw new \InvalidArgumentException('non-nullable available_workflows cannot be null');
        }
        $allowedValues = $this->getAvailableWorkflowsAllowableValues();
        if (array_diff($available_workflows, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'available_workflows', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['available_workflows'] = $available_workflows;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date create_date
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_modified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modified_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return int|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param int|null $house_number house_number
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            array_push($this->openAPINullablesSetToNull, 'house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_complement
     *
     * @return string|null
     */
    public function getHouseNumberComplement()
    {
        return $this->container['house_number_complement'];
    }

    /**
     * Sets house_number_complement
     *
     * @param string|null $house_number_complement house_number_complement
     *
     * @return self
     */
    public function setHouseNumberComplement($house_number_complement)
    {
        if (is_null($house_number_complement)) {
            array_push($this->openAPINullablesSetToNull, 'house_number_complement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number_complement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['house_number_complement'] = $house_number_complement;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string|null
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string|null $city_name city_name
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            array_push($this->openAPINullablesSetToNull, 'city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets insee_code
     *
     * @return string|null
     */
    public function getInseeCode()
    {
        return $this->container['insee_code'];
    }

    /**
     * Sets insee_code
     *
     * @param string|null $insee_code insee_code
     *
     * @return self
     */
    public function setInseeCode($insee_code)
    {
        if (is_null($insee_code)) {
            array_push($this->openAPINullablesSetToNull, 'insee_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('insee_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['insee_code'] = $insee_code;

        return $this;
    }

    /**
     * Gets service_contract
     *
     * @return \Infracorp\Extranet\Client\Model\AppointmentServiceContract|null
     */
    public function getServiceContract()
    {
        return $this->container['service_contract'];
    }

    /**
     * Sets service_contract
     *
     * @param \Infracorp\Extranet\Client\Model\AppointmentServiceContract|null $service_contract service_contract
     *
     * @return self
     */
    public function setServiceContract($service_contract)
    {
        if (is_null($service_contract)) {
            array_push($this->openAPINullablesSetToNull, 'service_contract');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_contract', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_contract'] = $service_contract;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Infracorp\Extranet\Client\Model\AppointmentContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Infracorp\Extranet\Client\Model\AppointmentContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            array_push($this->openAPINullablesSetToNull, 'contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets tech
     *
     * @return \Infracorp\Extranet\Client\Model\AppointmentTech|null
     */
    public function getTech()
    {
        return $this->container['tech'];
    }

    /**
     * Sets tech
     *
     * @param \Infracorp\Extranet\Client\Model\AppointmentTech|null $tech tech
     *
     * @return self
     */
    public function setTech($tech)
    {
        if (is_null($tech)) {
            array_push($this->openAPINullablesSetToNull, 'tech');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tech', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tech'] = $tech;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return bool|null
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param bool|null $accepted accepted
     *
     * @return self
     */
    public function setAccepted($accepted)
    {
        if (is_null($accepted)) {
            throw new \InvalidArgumentException('non-nullable accepted cannot be null');
        }
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets confirmation_process_id
     *
     * @return int|null
     */
    public function getConfirmationProcessId()
    {
        return $this->container['confirmation_process_id'];
    }

    /**
     * Sets confirmation_process_id
     *
     * @param int|null $confirmation_process_id confirmation_process_id
     *
     * @return self
     */
    public function setConfirmationProcessId($confirmation_process_id)
    {
        if (is_null($confirmation_process_id)) {
            array_push($this->openAPINullablesSetToNull, 'confirmation_process_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirmation_process_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirmation_process_id'] = $confirmation_process_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


